Mappings:
  CIDRConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicSubnetA:
      CIDR: '10.0.0.0/24'
    PublicSubnetB:
      CIDR: '10.0.1.0/24'

Resources:
  FargateTypeVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['CIDRConfig','VPC','CIDR']

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FargateTypeVPC
      CidrBlock: !FindInMap ['CIDRConfig','PublicSubnetA','CIDR']
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: { Ref: 'AWS::Region'}
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FargateTypeVPC
      CidrBlock: !FindInMap ['CIDRConfig','PublicSubnetB','CIDR']
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGateWayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref FargateTypeVPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref FargateTypeVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable